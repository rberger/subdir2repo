#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'subdir2repo'
require 'subdir2repo/extract_subdir'
require 'subdir2repo/push_repo'

module Subdir2repo
  class App
    include Methadone::Main
    include Methadone::CLILogging
    
    target = {}
    
    main do |src_repo, subdir|
      target[:subdir] = subdir
      target[:name] = options[:repo_name] ? options[:repo_name] : File.basename(subdir)
      target[:src_path] = "#{src_repo}/#{subdir}"
      target[:parent_dir] = options[:new_repo_parent_dir]
      target[:dst_repo_path] = File.join(target[:parent_dir], target[:name])
      
      case
      when (not Dir.exist? src_repo)
        exit_now! -1, "The src_repo: #{src_repo.inspect} is not a directory"
      when (not Dir.exist? "#{src_repo}/.git")
        exit_now! -1, "The src_repo: #{src_repo.inspect} is not a git repo (no #{src_repo}/.git)"
      when (not Dir.exist? target[:src_path])
        exit_now! -1, "The src_repo/subdir(#{src_repo}/#{subdir} does not exist"
      when (not Dir.exist? target[:parent_dir])
        exit_now! -1, "Target new_repo_parent_dir: #{target[:parent_dir].inspect} does not exist"
      when Dir.exist?(target[:dst_repo_path])
       exit_now! -1, "Target repo path: #{target[:dst_repo_path].inspect} already exists. Please check and delete"
      end
      
      
      Subdir2repo.extract_subdir(src_repo, target, options)
      if options[:git_org] && (not options[:git_org].empty?)
        Subdir2repo.push_repo(target, options)
      end
    end

    description "Clone src_repo, extract subdir and turn it into its own repo. Push to Github Org/Account if specified"

    DEFAULTS.each { |k,v| options[k] = v }

    on "-g", "--git_org ORG_NAME", "Github org/account to add this repo to"
    on "-p", "--new_repo_parent_dir DIR", "Path to where to create the new repo"
    on "-r", "--repo_name REPO", "Override name of new repo", "(default: Basename of subdir)"
    #    on "--preserve_branches BRANCH0,BRANCH1,BRANCHn", Array, "One or more branches of the source repo to preserve in target repo"

    arg :src_repo, "Local file path to Source Repo directory to clone and extract subdir from"
    arg :subdir, "Sub Directory to copy from src_repo and make its own repo"
    
    version Subdir2repo::VERSION

    use_log_level_option

    go!
  end
end
